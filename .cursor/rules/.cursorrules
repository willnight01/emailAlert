# 统一邮件告警平台 - Cursor 配置规则

## 项目结构
- `backend/` - Go + Gin 后端服务
- `frontend/` - Node.js + Vue3 前端应用
- 前后端分离架构，独立开发和部署

## 通用开发规范

### 代码风格
- 使用中文注释，英文代码
- 遵循各语言官方代码规范（Go: gofmt, JavaScript/Vue: ESLint + Prettier）
- 函数和变量命名要清晰表达业务含义
- 重要的业务逻辑必须添加注释

### 文件命名
- Go文件：小写下划线风格 (snake_case)
- Vue文件：大驼峰风格 (PascalCase)
- 静态资源文件：小写短横线风格 (kebab-case)

## 后端开发规范 (Go + Gin)

### 项目结构
```
backend/
├── main.go                 # 程序入口
├── go.mod                  # 依赖管理
├── config/                 # 配置文件
├── internal/
│   ├── api/               # API路由和处理器
│   ├── service/           # 业务逻辑服务层
│   ├── model/             # 数据模型
│   ├── repository/        # 数据访问层
│   └── middleware/        # 中间件
├── pkg/                   # 可复用的包
│   ├── email/            # 邮件发送模块
│   ├── notification/     # 告警通知模块 (钉钉、企业微信等)
│   └── utils/            # 工具函数
└── docs/                 # API文档
```

### 开发要点
- 使用Gin框架的最佳实践，合理使用中间件
- 实现邮件接收、解析、规则匹配的核心功能
- 支持多种告警渠道：邮件、钉钉、企业微信
- 使用结构化日志记录系统行为
- 实现优雅的错误处理和API响应格式
- 考虑并发安全和性能优化

### 邮件告警核心功能
- 邮件监控服务 (IMAP/POP3)
- 告警规则引擎 (支持关键词、正则、发件人等规则)
- 多渠道通知适配器
- 告警去重和频率控制

## 前端开发规范 (Vue3 + Node.js)

### 项目结构
```
frontend/
├── package.json           # 依赖管理
├── vite.config.js        # Vite配置
├── src/
│   ├── main.js           # 应用入口
│   ├── App.vue           # 根组件
│   ├── components/       # 可复用组件
│   ├── views/            # 页面组件
│   ├── router/           # 路由配置
│   ├── store/            # 状态管理(Pinia)
│   ├── api/              # API调用封装
│   ├── utils/            # 工具函数
│   └── assets/           # 静态资源
└── public/               # 公共资源
```

### 开发要点
- 使用Vue3的Composition API
- 使用Pinia进行状态管理
- 使用Vue Router进行路由管理
- 使用Element Plus或Ant Design Vue作为UI组件库
- 实现响应式设计，支持移动端访问
- 合理的组件封装和复用

### 主要功能页面
- 邮箱监控配置页面
- 告警规则管理页面
- 告警历史查询页面
- 通知渠道配置页面
- 系统状态监控页面

## API设计规范

### RESTful API
- 使用标准HTTP方法 (GET, POST, PUT, DELETE)
- 统一的响应格式：
```json
{
  "code": 200,
  "message": "success",
  "data": {}
}
```
- 合理的HTTP状态码使用
- API版本控制 (/api/v1/)

### 核心API端点
- 邮箱配置：/api/v1/mailboxes
- 告警规则：/api/v1/alert-rules  
- 告警历史：/api/v1/alerts
- 通知渠道：/api/v1/channels
- 系统状态：/api/v1/status

## 安全规范
- 实现JWT身份认证
- API接口权限控制
- 敏感信息加密存储（邮箱密码、API密钥等）
- 输入验证和XSS防护
- CORS配置

## 数据库设计
- 推荐使用MySQL或PostgreSQL
- 表命名使用小写下划线风格
- 核心表：users, mailboxes, alert_rules, alerts, notification_channels

## 部署和运维
- 使用Docker容器化部署
- 配置健康检查接口
- 日志集中收集和分析
- 监控关键指标（邮件处理量、告警发送成功率等）

## 测试规范
- 后端：使用Go的testing包进行单元测试
- 前端：使用Vitest进行单元测试
- 集成测试：测试邮件接收和告警发送的完整流程

## Git工作流
- 使用feature分支开发新功能
- commit信息使用中文，格式：[类型] 功能描述
- 类型：feat(新功能), fix(修复), docs(文档), style(格式), refactor(重构), test(测试)

## 环境配置
- 开发环境：使用.env.dev配置文件
- 生产环境：使用.env.prod配置文件
- 配置项包括：数据库连接、邮件服务器、第三方API密钥等 